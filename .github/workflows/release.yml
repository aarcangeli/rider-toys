name: Draft Release

on:
  workflow_dispatch:

jobs:
  release:
    name: Draft Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            build/gradle-jvm
            ~/.nuget/packages
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-Release-${{ hashFiles('gradlew', 'src/dotnet/*/*.csproj', 'src/dotnet/*.props', 'gradle-wrapper.properties') }}

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"

          echo "version=$VERSION" >> $GITHUB_OUTPUT

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Build plugin
      - name: Build Plugin
        run: ./gradlew :buildPlugin -PBuildConfiguration="Release" -PPluginVersion="${{ steps.properties.outputs.version }}" --no-daemon
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: '${{ github.event.repository.name }}.${{ github.ref_name }}'
          path: output

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ steps.properties.outputs.version }} \
            --draft \
            --title "v${{ steps.properties.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ steps.properties.outputs.changelog }}
          EOM
          )" ./output/*
